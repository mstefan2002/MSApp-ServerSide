class Database:

                /**
                * Construction
                * 
                * @param LogF $log
                * @param LogF $logQuery
                * @param Output $output
                * 
                */
                public function __construct(LogF $log, LogF $logQuery, Output $output)



                /** 
                * SQL UPDATE query
                * 
                * @param string $location         SQL Table name
                * @param array $arr               An array with `column name`=>(
                *                                                                        `value` (only when you get the value from the server side and not client side)[not recommended],
                *                                                                        `?` (you can parse the value to $parms if you get the data from client side and is unsafe)[recommended],
                *                                                                         `null` (the same procedure as ?)
                *                                                              )
                *                                 Example: the array ["tag","name"=>"New Name"]	is equal with ["tag"=>"?","name"=>"New Name"]
                * @param string|null $condition   The condition for UPDATE query
                * @param array|null $parms        An array with values of `$arr` and `$condition`
                *                                 If you have some unsafe data you should use $parms
                *                                 Example code: $location  = "accounts";                              
                *                                               $arr       = array("tag"=>"?","name"=>"New Name");    // you dont give tag a value and you use ? method
                *                                               $condition = "id=?";                                  // you dont give id a value and you use ? method
                *                                               $parms     = array("new_tag",5);                      // In the order of the parameters(first tag then id) we get 2 values
                *                                 Above code is equal with this query(with protection for sql injection):
                *                                 UPDATE `accounts` SET `tag`='new_tag',`name`='New Name' WHERE `id`=5
                * 
                * @return mysqli_result|false
                * 
                */
                public function update(string $location, array $arr, ?string $condition, ?array $parms) : mysqli_result|false




                /** 
                * SQL INSERT query
                * 
                * @param string $location         SQL Table name
                * @param array $arr               An array with `column name`=>(
                *                                                                        `value` (only when you get the value from the server side and not client side)[not recommended],
                *                                                                        `?` (you can parse the value to $parms if you get the data from client side and is unsafe)[recommended],
                *                                                                         `null` (the same procedure as ?)
                *                                                              )
                * @param array|null $parms        An array with values of `$arr`
                *                                 If you have some unsafe data you should use $parms
                *                                 Example code: $location  = "accounts";                              
                *                                               $arr       = array("tag"=>"?","name"=>"New Name");    // you dont give tag a value and you use ? method
                *                                               $parms     = array("new_tag");
                *                                 Above code is equal with this query(with protection for sql injection):
                *                                 INSERT INTO `accounts` (`tag`,`name`) VALUES('new_tag','New Name')
                *
                * @return mysqli_result|false
                * 
                */
                public function insert(string $location, array $arr, ?array $parms) : mysqli_result|false




		//aici
                /** 
                * SQL SELECT query
                * 
                * @see docs/Database.txt#select
                * 
                * @param string|null $select       Selected columns to get or `null` to be replaced with `*`
                * @param string $location          SQL Table name
                * @param string|null $condition    The condition for SELECT query
                * @param string|null $other        Other parms like order/join/etc
                * @param array|null $parms         An array with values of `$select` , `$condition` and `$other`
                * 
                * @return mysqli_result|false
                * 
                */
                public function select(?string $select,string $location,?string $condition,?string $other,?array $parms) : mysqli_result|false



                // Returneaza rezultatul queryului sau false
                -> get_result()


                // Executa o interogare SQL cu protectie impotriva SQL Injection
                // $query        - stringul query
                // $params        - un array cu variabilele trimise ca parametrii(pentru a preveni SQL Injection)

                // Exemplu: $connect->cQuery("UPDATE `accounts` SET `tag` = 'test' WHERE id=?", array(1));
                // se transcrie in UPDATE `accounts` SET `tag` = 'test' WHERE id='1'

                // Returneaza obiectul mysqli_result sau false in caz de eroare
                -> cQuery($query,$parms)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                // Functia INSERT Sql`````````````````````````````````````````````````````````````````````
                // $location                - locatia tabelului
                // $key                        - numele coloanei/coloanelor
                // $value                - valorile pentru coloane sau ? pentru a folosi bind-area ( PROTEJAT DE SQL INJECTION )
                // $parms     - array cu valorile bind-ate ( cele din $value )
                              - poate fi null

                // Exemplu: $connect->insert("accounts", "`name`,`tag`","'Marian',?",array("tag_protejat"));
                // se transcrie in INSERT INTO `accounts` (`name`,`tag`) VALUES ('Marian','tag_protejat')

                // Returneaza obiectul mysqli_result sau false in caz de eroare
                -> insert(string $location,string $key,string $value, array $parms=null) : mysqli_result|false

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                // Functia SELECT Sql
                // $select    - ce coloane selectezi din tabel
                //            - poate fi null si se inlocuieste cu * in functie
                // $location  - locatia tabelului
                // $condition - conditie pentru a executa SELECT ( WHERE conditie )
                              - poate fi null
                // $other     - order/join/etc
                //            - poate fi null
                // $parms     - array cu valorile bind-ate ( cele din $select|$condition|$other )
                              - poate fi null

                // Exemplu: $connect->select("`id`,10-?","accounts",null,array("5"));
                // se transcrie in SELECT `id`,10-5 FROM `accounts`

                // Returneaza obiectul mysqli_result sau false in caz de eroare
                -> select(string $select=null,string $location,string $condition=null,string $other=null,array $parms=null) : mysqli_result|false

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                // Functia DELETE Sql
                // $location  - locatia tabelului
                // $condition - conditie pentru a executa DELETE ( WHERE conditie )
                              - poate fi null
                // $parms     - array cu valorile bind-ate ( cele din $condition )
                              - poate fi null

                // Exemplu: $connect->delete("accounts","id=?",array("5"));
                // se transcrie in DELETE FROM `accounts` WHERE id='5'

                // Returneaza obiectul mysqli_result sau false in caz de eroare
                -> delete(string $location,string $condition=null,array $parms=null) : mysqli_result|false

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                // Returneaza ultimul id dupa o executie insert
                -> lastID()
